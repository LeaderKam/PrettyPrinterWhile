/**
 * generated by Xtext 2.19.0
 */
package prettyCompilation.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import prettyCompilation.generator.FunctionTable;
import prettyCompilation.generator.RegisterList;
import prettyCompilation.generator.RegisterStack;
import prettyCompilation.generator.ThreeAddrCode;
import prettyCompilation.wh.Affectation;
import prettyCompilation.wh.Command;
import prettyCompilation.wh.Commands;
import prettyCompilation.wh.Expr;
import prettyCompilation.wh.For;
import prettyCompilation.wh.Foreach;
import prettyCompilation.wh.Function;
import prettyCompilation.wh.If;
import prettyCompilation.wh.Nop;
import prettyCompilation.wh.Program;
import prettyCompilation.wh.Read;
import prettyCompilation.wh.While;
import prettyCompilation.wh.Write;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class WhGenerator extends AbstractGenerator {
  private String currentName;
  
  private FunctionTable functionTable;
  
  private boolean code = false;
  
  private RegisterList registresAff = new RegisterList("aff");
  
  private RegisterStack registresExpr = new RegisterStack("expr");
  
  private RegisterStack registresI = new RegisterStack("i");
  
  private RegisterStack registresLoop = new RegisterStack("loop");
  
  private RegisterStack registresArgs = new RegisterStack("args");
  
  /**
   * Instance unique pré-initialisée
   */
  public static FunctionTable INSTANCE = new FunctionTable();
  
  private List<String> errorList = new LinkedList<String>();
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    this.doGenerate(resource, fsa, context, "", false);
  }
  
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context, final String output, final boolean codep) {
    this.code = codep;
    this.functionTable = WhGenerator.INSTANCE;
    Iterable<Program> _filter = Iterables.<Program>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Program.class);
    for (final Program e : _filter) {
      {
        this.compile(e);
        boolean _isEmpty = this.errorList.isEmpty();
        boolean _not = (!_isEmpty);
        if (_not) {
          System.err.println("Compilation errors :");
          for (final String issue : this.errorList) {
            System.err.println(issue);
          }
          return;
        }
        if (this.code) {
          boolean _notEquals = (!Objects.equal(output, ""));
          if (_notEquals) {
            fsa.generateFile(output, this.compile3addr());
          } else {
            Set<String> _functions = this.functionTable.getFunctions();
            for (final String f : _functions) {
              {
                InputOutput.<String>println((("Code 3 adresses de " + f) + " :"));
                List<ThreeAddrCode> _instructions = this.functionTable.getInstructions(f);
                for (final ThreeAddrCode instruction : _instructions) {
                  InputOutput.<String>println(instruction.toString());
                }
                InputOutput.<String>println("------------------");
              }
            }
          }
        } else {
          fsa.generateFile(output, this.compileToJava());
        }
        Set<String> _functions_1 = this.functionTable.getFunctions();
        for (final String f_1 : _functions_1) {
          {
            String inputs = this.functionTable.getInput(f_1).toString().substring(1);
            int _length = inputs.length();
            int _minus = (_length - 1);
            inputs = inputs.substring(0, _minus);
            fsa.generateFile((("temp/" + f_1) + ".txt"), inputs);
          }
        }
      }
    }
  }
  
  public CharSequence compile3addr() {
    StringConcatenation _builder = new StringConcatenation();
    {
      Set<String> _functions = this.functionTable.getFunctions();
      for(final String f : _functions) {
        _builder.append("Code 3 adresses de ");
        _builder.append(" ");
        _builder.append(f);
        _builder.append(":");
        _builder.newLineIfNotEmpty();
        {
          List<ThreeAddrCode> _instructions = this.functionTable.getInstructions(f);
          for(final ThreeAddrCode instruction : _instructions) {
            String _string = instruction.toString();
            _builder.append(_string);
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("************------------------************\t");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public void compile(final Program p) {
    EList<Function> _functions = p.getFunctions();
    for (final Function f : _functions) {
      {
        this.currentName = f.getName();
        this.functionTable.addFunction(f.getName(), f.getDefinition().getWrite().getVariable().size());
        this.compile(f.getDefinition().getRead());
      }
    }
    EList<Function> _functions_1 = p.getFunctions();
    for (final Function f_1 : _functions_1) {
      {
        this.currentName = f_1.getName();
        this.compile(f_1);
      }
    }
  }
  
  public void compile(final Function f) {
    String _prefixe = this.registresAff.getPrefixe();
    ThreeAddrCode _threeAddrCode = new ThreeAddrCode("array", _prefixe, null, null);
    this.functionTable.addThreeAddrInstruction(this.currentName, _threeAddrCode);
    String _prefixe_1 = this.registresExpr.getPrefixe();
    ThreeAddrCode _threeAddrCode_1 = new ThreeAddrCode("array", _prefixe_1, null, null);
    this.functionTable.addThreeAddrInstruction(this.currentName, _threeAddrCode_1);
    String _prefixe_2 = this.registresI.getPrefixe();
    ThreeAddrCode _threeAddrCode_2 = new ThreeAddrCode("array", _prefixe_2, null, null);
    this.functionTable.addThreeAddrInstruction(this.currentName, _threeAddrCode_2);
    String _prefixe_3 = this.registresLoop.getPrefixe();
    ThreeAddrCode _threeAddrCode_3 = new ThreeAddrCode("array", _prefixe_3, null, null);
    this.functionTable.addThreeAddrInstruction(this.currentName, _threeAddrCode_3);
    String _prefixe_4 = this.registresArgs.getPrefixe();
    ThreeAddrCode _threeAddrCode_4 = new ThreeAddrCode("array", _prefixe_4, null, null);
    this.functionTable.addThreeAddrInstruction(this.currentName, _threeAddrCode_4);
    ThreeAddrCode _threeAddrCode_5 = new ThreeAddrCode("array", "whileVar", null, null);
    this.functionTable.addThreeAddrInstruction(this.currentName, _threeAddrCode_5);
    ThreeAddrCode _threeAddrCode_6 = new ThreeAddrCode("array", "out", null, null);
    this.functionTable.addThreeAddrInstruction(this.currentName, _threeAddrCode_6);
    this.compile(f.getDefinition().getCommands());
    this.compile(f.getDefinition().getWrite());
    ThreeAddrCode _threeAddrCode_7 = new ThreeAddrCode("ret", "out", null, null);
    this.functionTable.addThreeAddrInstruction(this.currentName, _threeAddrCode_7);
  }
  
  public void compile(final Read r) {
    EList<String> _variable = r.getVariable();
    for (final String v : _variable) {
      this.functionTable.addInput(this.currentName, v.toString());
    }
  }
  
  public void compile(final Commands c) {
    EList<Command> _commands = c.getCommands();
    for (final Command command : _commands) {
      this.compile(command);
    }
  }
  
  public String compile(final Command c) {
    String _xifexpression = null;
    EObject _command = c.getCommand();
    if ((_command instanceof Nop)) {
      EObject _command_1 = c.getCommand();
      this.compile(((Nop) _command_1));
    } else {
      String _xifexpression_1 = null;
      EObject _command_2 = c.getCommand();
      if ((_command_2 instanceof If)) {
        EObject _command_3 = c.getCommand();
        this.compile(((If) _command_3));
      } else {
        String _xifexpression_2 = null;
        EObject _command_4 = c.getCommand();
        if ((_command_4 instanceof Affectation)) {
          EObject _command_5 = c.getCommand();
          this.compile(((Affectation) _command_5));
        } else {
          String _xifexpression_3 = null;
          EObject _command_6 = c.getCommand();
          if ((_command_6 instanceof While)) {
            EObject _command_7 = c.getCommand();
            this.compile(((While) _command_7));
          } else {
            String _xifexpression_4 = null;
            EObject _command_8 = c.getCommand();
            if ((_command_8 instanceof For)) {
              EObject _command_9 = c.getCommand();
              _xifexpression_4 = this.compile(((For) _command_9));
            } else {
              String _xifexpression_5 = null;
              EObject _command_10 = c.getCommand();
              if ((_command_10 instanceof Foreach)) {
                EObject _command_11 = c.getCommand();
                _xifexpression_5 = this.compile(((Foreach) _command_11));
              }
              _xifexpression_4 = _xifexpression_5;
            }
            _xifexpression_3 = _xifexpression_4;
          }
          _xifexpression_2 = _xifexpression_3;
        }
        _xifexpression_1 = _xifexpression_2;
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  public void compile(final Nop w) {
    ThreeAddrCode _threeAddrCode = new ThreeAddrCode("nop", null, null, null);
    this.functionTable.addThreeAddrInstruction(this.currentName, _threeAddrCode);
  }
  
  public void compile(final While w) {
    String name = this.compile(w.getExpr());
    ThreeAddrCode _threeAddrCode = new ThreeAddrCode("while", null, name, null);
    this.functionTable.addThreeAddrInstruction(this.currentName, _threeAddrCode);
    this.compile(w.getCommands());
    String _compile = this.compile(w.getExpr());
    ThreeAddrCode _threeAddrCode_1 = new ThreeAddrCode("aff", name, _compile, null);
    this.functionTable.addThreeAddrInstruction(this.currentName, _threeAddrCode_1);
    this.functionTable.popFromInstructionList(this.currentName);
  }
  
  public void compile(final If i) {
    String _compile = this.compile(i.getExpr());
    ThreeAddrCode _threeAddrCode = new ThreeAddrCode("if", null, _compile, null);
    this.functionTable.addThreeAddrInstruction(this.currentName, _threeAddrCode);
    this.compile(i.getCommands1());
    this.functionTable.popFromInstructionList(this.currentName);
    Commands _commands2 = i.getCommands2();
    boolean _tripleNotEquals = (_commands2 != null);
    if (_tripleNotEquals) {
      this.compile(i.getCommands2());
    }
    this.functionTable.popFromInstructionList(this.currentName);
  }
  
  public void compile(final Affectation a) {
    EList<String> _affectations = a.getAffectations();
    for (final String v : _affectations) {
      boolean _varExists = this.functionTable.varExists(this.currentName, v);
      boolean _not = (!_varExists);
      if (_not) {
        this.functionTable.addVariable(this.currentName, v);
      }
    }
    EList<Expr> _valeurs = a.getValeurs();
    for (final Expr expr : _valeurs) {
      String _push = this.registresAff.push();
      String _compile = this.compile(expr);
      ThreeAddrCode _threeAddrCode = new ThreeAddrCode("aff", _push, _compile, null);
      this.functionTable.addThreeAddrInstruction(this.currentName, _threeAddrCode);
    }
    EList<String> _affectations_1 = a.getAffectations();
    for (final String v_1 : _affectations_1) {
      {
        boolean _isEmpty = this.registresAff.isEmpty();
        if (_isEmpty) {
          this.errorList.add("[ERROR]Too many values at the left side of the affectation");
          return;
        }
        String _variable = this.functionTable.getVariable(this.currentName, v_1);
        String _pop = this.registresAff.pop();
        ThreeAddrCode _threeAddrCode_1 = new ThreeAddrCode("aff", _variable, _pop, null);
        this.functionTable.addThreeAddrInstruction(this.currentName, _threeAddrCode_1);
      }
    }
    boolean _isEmpty = this.registresAff.isEmpty();
    boolean _not_1 = (!_isEmpty);
    if (_not_1) {
      this.errorList.add("[ERROR]Too many values at the right side of the affectation");
      while ((!this.registresAff.isEmpty())) {
        this.registresAff.pop();
      }
      return;
    }
  }
  
  public String compile(final For f) {
    String _xblockexpression = null;
    {
      String name = this.compile(f.getExpr());
      String _push = this.registresLoop.push();
      String _push_1 = this.registresI.push();
      ThreeAddrCode _threeAddrCode = new ThreeAddrCode("for", _push, name, _push_1);
      this.functionTable.addThreeAddrInstruction(this.currentName, _threeAddrCode);
      this.compile(f.getCommands());
      this.functionTable.popFromInstructionList(this.currentName);
      this.registresI.pop();
      _xblockexpression = this.registresLoop.pop();
    }
    return _xblockexpression;
  }
  
  public String compile(final Foreach f) {
    String _xblockexpression = null;
    {
      boolean _varExists = this.functionTable.varExists(this.currentName, f.getVariable());
      boolean _not = (!_varExists);
      if (_not) {
        this.functionTable.addVariable(this.currentName, f.getVariable());
      }
      String _push = this.registresExpr.push();
      String _compile = this.compile(f.getExpr());
      String _variable = this.functionTable.getVariable(this.currentName, f.getVariable());
      ThreeAddrCode _threeAddrCode = new ThreeAddrCode("foreach", _push, _compile, _variable);
      this.functionTable.addThreeAddrInstruction(this.currentName, _threeAddrCode);
      this.compile(f.getCommands());
      this.functionTable.popFromInstructionList(this.currentName);
      _xblockexpression = this.registresExpr.pop();
    }
    return _xblockexpression;
  }
  
  public void compile(final Write w) {
    EList<String> _variable = w.getVariable();
    for (final String v : _variable) {
      {
        boolean _varExists = this.functionTable.varExists(this.currentName, v);
        boolean _not = (!_varExists);
        if (_not) {
          String _variable_1 = this.functionTable.getVariable(this.currentName, v);
          ThreeAddrCode _threeAddrCode = new ThreeAddrCode("nil", _variable_1, null, null);
          this.functionTable.addThreeAddrInstruction(this.currentName, _threeAddrCode);
        }
        String _variable_2 = this.functionTable.getVariable(this.currentName, v);
        ThreeAddrCode _threeAddrCode_1 = new ThreeAddrCode("push", "out", _variable_2, null);
        this.functionTable.addThreeAddrInstruction(this.currentName, _threeAddrCode_1);
      }
    }
  }
  
  public CharSequence compileToJava() {
    StringConcatenation _builder = new StringConcatenation();
    {
      Set<String> _functions = this.functionTable.getFunctions();
      for(final String f : _functions) {
        _builder.append("public List<BinTree> ");
        _builder.append(f);
        _builder.append("(");
        {
          List<String> _input = this.functionTable.getInput(f);
          boolean _hasElements = false;
          for(final String read : _input) {
            if (!_hasElements) {
              _hasElements = true;
            } else {
              _builder.appendImmediate(", ", "");
            }
            _builder.append("BinTree ");
            String _variable = this.functionTable.getVariable(f, read);
            _builder.append(_variable);
          }
        }
        _builder.append("){");
        _builder.newLineIfNotEmpty();
        {
          List<ThreeAddrCode> _instructions = this.functionTable.getInstructions(f);
          for(final ThreeAddrCode instruction : _instructions) {
            _builder.append("\t");
            String _compile = instruction.compile();
            _builder.append(_compile, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("}");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public String compile(final Expr e) {
    String _valeur = e.getValeur();
    boolean _tripleNotEquals = (_valeur != null);
    if (_tripleNotEquals) {
      boolean _equals = e.getValeur().equals("nil");
      if (_equals) {
        String _push = this.registresExpr.push();
        ThreeAddrCode _threeAddrCode = new ThreeAddrCode("nil", _push, null, null);
        this.functionTable.addThreeAddrInstruction(this.currentName, _threeAddrCode);
        return this.registresExpr.pop();
      } else {
        return this.functionTable.getVariable(this.currentName, e.getValeur());
      }
    } else {
      String _symb = e.getSymb();
      boolean _tripleNotEquals_1 = (_symb != null);
      if (_tripleNotEquals_1) {
        boolean _varExists = this.functionTable.varExists(this.currentName, e.getSymb());
        boolean _not = (!_varExists);
        if (_not) {
          this.functionTable.addVariable(this.currentName, e.getSymb());
        }
        String _variable = this.functionTable.getVariable(this.currentName, e.getSymb());
        String _symb_1 = e.getSymb();
        ThreeAddrCode _threeAddrCode_1 = new ThreeAddrCode("symb", _variable, _symb_1, null);
        this.functionTable.addThreeAddrInstruction(this.currentName, _threeAddrCode_1);
        return this.functionTable.getVariable(this.currentName, e.getSymb());
      } else {
        boolean _equals_1 = e.getOpe().equals("cons");
        if (_equals_1) {
          String name = this.registresExpr.push();
          String _compile = this.compile(ListExtensions.<Expr>reverseView(e.getLexpr().getExprs()).remove(0));
          ThreeAddrCode _threeAddrCode_2 = new ThreeAddrCode("aff", name, _compile, null);
          this.functionTable.addThreeAddrInstruction(this.currentName, _threeAddrCode_2);
          List<Expr> _reverseView = ListExtensions.<Expr>reverseView(e.getLexpr().getExprs());
          for (final Expr expr : _reverseView) {
            String _compile_1 = this.compile(expr);
            ThreeAddrCode _threeAddrCode_3 = new ThreeAddrCode("cons", name, _compile_1, name);
            this.functionTable.addThreeAddrInstruction(this.currentName, _threeAddrCode_3);
          }
          return this.registresExpr.pop();
        } else {
          boolean _equals_2 = e.getOpe().equals("list");
          if (_equals_2) {
            String name_1 = this.registresExpr.push();
            ThreeAddrCode _threeAddrCode_4 = new ThreeAddrCode("nil", name_1, null, null);
            this.functionTable.addThreeAddrInstruction(this.currentName, _threeAddrCode_4);
            List<Expr> _reverseView_1 = ListExtensions.<Expr>reverseView(e.getLexpr().getExprs());
            for (final Expr expr_1 : _reverseView_1) {
              String _compile_2 = this.compile(expr_1);
              ThreeAddrCode _threeAddrCode_5 = new ThreeAddrCode("cons", name_1, _compile_2, name_1);
              this.functionTable.addThreeAddrInstruction(this.currentName, _threeAddrCode_5);
            }
            return this.registresExpr.pop();
          } else {
            if (((e.getOpe().equals("hd") || e.getOpe().equals("tl")) || e.getOpe().equals("not"))) {
              String name_2 = this.registresExpr.push();
              String _ope = e.getOpe();
              String _compile_3 = this.compile(e.getExpr());
              ThreeAddrCode _threeAddrCode_6 = new ThreeAddrCode(_ope, name_2, _compile_3, null);
              this.functionTable.addThreeAddrInstruction(this.currentName, _threeAddrCode_6);
              return this.registresExpr.pop();
            } else {
              if (((e.getOpe().equals("and") || e.getOpe().equals("or")) || e.getOpe().equals("=?"))) {
                String name_3 = this.registresExpr.push();
                String _ope_1 = e.getOpe();
                String _compile_4 = this.compile(e.getEx1());
                String _compile_5 = this.compile(e.getEx2());
                ThreeAddrCode _threeAddrCode_7 = new ThreeAddrCode(_ope_1, name_3, _compile_4, _compile_5);
                this.functionTable.addThreeAddrInstruction(this.currentName, _threeAddrCode_7);
                return this.registresExpr.pop();
              } else {
                boolean _functionExists = this.functionTable.functionExists(e.getOpe());
                boolean _not_1 = (!_functionExists);
                if (_not_1) {
                  String _ope_2 = e.getOpe();
                  String _plus = ("[ERROR]the function named \"" + _ope_2);
                  String _plus_1 = (_plus + "\" doesn\'t exist");
                  this.errorList.add(_plus_1);
                  return "null";
                }
                int _size = this.functionTable.getInput(e.getOpe()).size();
                int _size_1 = e.getLexpr().getExprs().size();
                boolean _notEquals = (_size != _size_1);
                if (_notEquals) {
                  String _ope_3 = e.getOpe();
                  String _plus_2 = ("[ERROR]the function named \"" + _ope_3);
                  String _plus_3 = (_plus_2 + "\" have ");
                  int _size_2 = this.functionTable.getInput(e.getOpe()).size();
                  String _plus_4 = (_plus_3 + Integer.valueOf(_size_2));
                  String _plus_5 = (_plus_4 + 
                    " parameters and not ");
                  int _size_3 = e.getLexpr().getExprs().size();
                  String _plus_6 = (_plus_5 + Integer.valueOf(_size_3));
                  this.errorList.add(_plus_6);
                  return "null";
                }
                if (((e.eContainer() instanceof Affectation) || (this.functionTable.getOutput(e.getOpe()) == 1))) {
                  String name_4 = this.registresExpr.push();
                  String args = this.registresArgs.push();
                  ThreeAddrCode _threeAddrCode_8 = new ThreeAddrCode("subarray", args, null, null);
                  this.functionTable.addThreeAddrInstruction(this.currentName, _threeAddrCode_8);
                  EList<Expr> _exprs = e.getLexpr().getExprs();
                  for (final Expr expr_2 : _exprs) {
                    String _compile_6 = this.compile(expr_2);
                    ThreeAddrCode _threeAddrCode_9 = new ThreeAddrCode("push", args, _compile_6, null);
                    this.functionTable.addThreeAddrInstruction(this.currentName, _threeAddrCode_9);
                  }
                  String _ope_4 = e.getOpe();
                  String _pop = this.registresArgs.pop();
                  String _pop_1 = this.registresExpr.pop();
                  ThreeAddrCode _threeAddrCode_10 = new ThreeAddrCode("call", _ope_4, _pop, _pop_1);
                  this.functionTable.addThreeAddrInstruction(this.currentName, _threeAddrCode_10);
                  String _push_1 = this.registresExpr.push();
                  ThreeAddrCode _threeAddrCode_11 = new ThreeAddrCode("pop", _push_1, name_4, null);
                  this.functionTable.addThreeAddrInstruction(this.currentName, _threeAddrCode_11);
                  int _output = this.functionTable.getOutput(e.getOpe());
                  boolean _greaterThan = (_output > 1);
                  if (_greaterThan) {
                    int i = 0;
                    for (i = 0; (i < (this.functionTable.getOutput(e.getOpe()) - 1)); i++) {
                      {
                        String _push_2 = this.registresExpr.push();
                        ThreeAddrCode _threeAddrCode_12 = new ThreeAddrCode("pop", _push_2, name_4, null);
                        this.functionTable.addThreeAddrInstruction(this.currentName, _threeAddrCode_12);
                        String _push_3 = this.registresAff.push();
                        String _pop_2 = this.registresExpr.pop();
                        ThreeAddrCode _threeAddrCode_13 = new ThreeAddrCode("aff", _push_3, _pop_2, null);
                        this.functionTable.addThreeAddrInstruction(this.currentName, _threeAddrCode_13);
                      }
                    }
                  }
                  return this.registresExpr.pop();
                } else {
                  String _ope_5 = e.getOpe();
                  String _plus_7 = ("[ERROR]the function named \"" + _ope_5);
                  String _plus_8 = (_plus_7 + "\" has more than one returned value");
                  this.errorList.add(_plus_8);
                  return "null";
                }
              }
            }
          }
        }
      }
    }
  }
}
